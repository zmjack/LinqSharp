// Copyright 2020 zmjack
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// See the LICENSE file in the project root for more information.

// <auto-generated/>
using NStandard;
using System;
using System.Reflection;

namespace LinqSharp;

internal static partial class MethodAccessor
{
    internal class String
    {
        internal static MethodInfo Concat_String => lazy_Concat_String.Value;
        /// <summary>
        /// Method: System.String Concat(System.String, System.String)
        /// </summary>
        private static readonly Lazy<MethodInfo> lazy_Concat_String = new(() =>
        {
            return typeof(string)
                .GetMethodViaQualifiedName(
                    "System.String Concat(System.String, System.String)",
                    BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static
                );
        });

        internal static MethodInfo Concat_Object => lazy_Concat_Object.Value;
        /// <summary>
        /// Method: System.String Concat(System.Object, System.Object)
        /// </summary>
        private static readonly Lazy<MethodInfo> lazy_Concat_Object = new(() =>
        {
            return typeof(string)
                .GetMethodViaQualifiedName(
                    "System.String Concat(System.Object, System.Object)",
                    BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static
                );
        });

        internal static MethodInfo CompareTo => lazy_CompareTo.Value;
        /// <summary>
        /// Method: Int32 CompareTo(System.String)
        /// </summary>
        private static readonly Lazy<MethodInfo> lazy_CompareTo = new(() =>
        {
            return typeof(string)
                .GetMethodViaQualifiedName(
                    "Int32 CompareTo(System.String)",
                    BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance
                );
        });

        internal static MethodInfo Contains => lazy_Contains.Value;
        /// <summary>
        /// Method: Boolean Contains(System.String)
        /// </summary>
        private static readonly Lazy<MethodInfo> lazy_Contains = new(() =>
        {
            return typeof(string)
                .GetMethodViaQualifiedName(
                    "Boolean Contains(System.String)",
                    BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance
                );
        });

        internal static MethodInfo Equals => lazy_Equals.Value;
        /// <summary>
        /// Method: Boolean Equals(System.String)
        /// </summary>
        private static readonly Lazy<MethodInfo> lazy_Equals = new(() =>
        {
            return typeof(string)
                .GetMethodViaQualifiedName(
                    "Boolean Equals(System.String)",
                    BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance
                );
        });

    }
}

