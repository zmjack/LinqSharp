<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// Copyright 2020 zmjack
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// See the LICENSE file in the project root for more information.

// <auto-generated/>
using NStandard;
using System.Reflection;

namespace LinqSharp;

internal static partial class MethodAccessor
{
    internal class <#=className#>
    {
<#
    foreach(var item in _dict)
    {
#>
        internal static MethodInfo <#=item.Key#> => lazy_<#=item.Key#>.Value;
        /// <summary>
        /// Method: <#=item.Value.QualifiedName#>
        /// </summary>
        private static readonly Lazy<MethodInfo> lazy_<#=item.Key#> = new(() =>
        {
            return typeof(<#=item.Value.Type#>)
                .GetMethodViaQualifiedName(
                    "<#=item.Value.QualifiedName#>",
                    <#=item.Value.Flags#>
                );
        });

<#
    }
#>
    }
}

<#+
private string className = "Object";

private readonly Dictionary<string, (string Type, string Flags, string QualifiedName)> _dict = new()
{
    ["ToStringMethod"] = (
        "object",
        "BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance",
        "System.String ToString()"
    ),
};
#>